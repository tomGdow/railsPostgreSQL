#!/bin/bash 

DIR="${BASH_SOURCE%/*}"

if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "$DIR/railsPsqlFns"

usage () {
cat <<END
NAME
       $(basename $0)

       This program checks if PostgreSQL is properly configured as a
       prerequesite to creating a Ruby-on-Rails application with 
       PostgreSQL as database. 

SYNOPSIS
       $(basename $0) [-h] [<password ENV variable name>]

DESCRIPTION

       This script checks if:

       (1) PostgreS is installed 
       (2) a PostgreSQL role exists for the logged-in user
       (3) a connection can be made to PostgrSQL
       (4) the logged-in user can log into PostgreSQL using the 
           PostgreSQL password stored in an ENV variable.
       (5) the PostgreSQL gem is installed.  
 
       It is not essential that the PostgreSQL gem be installed in order to
       create a Ruby-on-Rails app, but it is recommended.

OPTIONS 
  
       -h: get help

REQUIREMENTS

       For all tests to be successful, the user OS must have the 
       followiing properties:

       (1) PostgreSQL must be installed.
       (2) A PostgreSQL role with the same username as the current
       operating system username must exist.  That is, the PostgreSQL
       username and the result of the command '\$(whoami)' must be 
       identical.

       You may wish to create a role as follows, where '<username>'
       it that given by \${whoami}:

       sudo -u postgres createuser -s <username>
       sudo -u postgres psql
       \\password <username>

       (3) An ENV variable must be set equal to the current user's 
       PostgreSQL password.  The default name for the ENV variable is 
       POSTGRES_PASSWORD, and if this is used (recommended) the script 
       may be executed without any arguments.

       You may need to execute the following prior to running the program. 

       POSTGRES_PASSWORD='my_postgres_password'
       export POSTGRES_PASSWORD'
       Or, include the following line in your .bashrc file:
       export POSTGRES_PASSWORD='my_postgres_password'
NOTES

EXAMPLE USAGE
       okpsql
       okpsql "PSQL-ENV-VARIABLE"
END
}

## Set options
while getopts ":h" opt; do
	case $opt in
		h)
			usage | less
			exit 1
			;;
	esac
done

init () {

  isProgramInstalled  "psql"
	verifyPostgresRole 
	verifyPostgresConnect 
	verifyPostgresLogin "${@}" 
	checkPostgresGem 

} 2>/dev/null

init
