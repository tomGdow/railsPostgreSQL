#!/bin/bash

isProgramInstalled () {
  declare prog_version=$("${1}" --version) 
  if [[ -z "${prog_version// }" ]]; then
    echo "No version of ${1^} detected. Check your system with '${1} --version'"
  else
    echo "OK-${1^^}  ${prog_version}"
  fi
} 2>/dev/null

verifyPostgresRole () {

  user_role_status=$(psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$(whoami)'")

  if [[ ${user_role_status} == 1 ]];then
    echo "OK-PSQL  PostgreSQL role $(whoami)"
  else 
    echo "ERROR No PostgreSQL role for '$(whoami)'"
    echo "  type 'okpsql --help' for advise on how to create PostgreSQL role"
  fi
} 2>/dev/null

verifyPostgresConnect () {

  declare connect_psq_status=$(psql -d postgres -c "\q" > /dev/null 2>&1; echo -n $?)

  if [[ ${connect_psq_status} == 0 ]];then
    echo "OK-PSQL  PostgreSQL connection"
  else 
    echo "ERROR. Cannot connect to PostgreSQL. Check user account status, and"
    echo "check that the following command succeeds (returns '0') before continuing:"
    echo '  echo $(psql -d postgres -c "\q" > /dev/null 2>&1; echo -n $?)'
    exit 1
  fi
} 2>/dev/null

verifyPostgresLogin () {

  if [[ "${#}" -eq 0 ]]; then
    password_env_var_string="POSTGRES_PASSWORD"
  else 
    password_env_var_string="${1}"
  fi

  psql_password=$(env | grep ${password_env_var_string} \
    | cut -d \= -f 2)
  md5_encrypted_psql_credentials=$(echo -n ${psql_password}$(whoami)\
    |  md5sum)
  psql_login_status="$(psql  -d postgres -c 'select * from pg_shadow'\
    |cut -d \| -f 7 | \
    grep -c  ${md5_encrypted_psql_credentials})"

  if [[ ${psql_login_status} -eq 1 ]]; then
    echo "OK-PSQL  Env var ${password_env_var_string}. \
(hash: $(echo -n  ${md5_encrypted_psql_credentials} | cut -d \- -f 1))"
  else
    echo "ERROR: Cannot detect hashed credentials in pg_shadow.\
      Check ENV variable set properly."
  fi
} 2>/dev/null

checkPostgresGem () {
  pg="$(gem list | grep  '^pg')"
  gemcount=$(echo $pg | grep -cw '^pg')
  #declare gemcount="${pg} | wc -l"  

  if [[ ${gemcount} -eq 0 ]]; then
    echo -e "WARNING-PSQL: PostgreSQL gem not detected in gem list.\n \
      It is recommended that you ensure 'gem install pg' succeeds before\
      continuing"
  else
    echo "OK-PSQL  Gem ${pg} detected"
  fi
} 2>/dev/null



usage () {
cat <<END
NAME
       $(basename $0)

       This script contains the following bash programs

       (1) isProgramInstalled
       (2) verifyPostgresRole
       (3) verifyPostgresConnect
       (4) verifyPostgresLogin 
       (5) checkPostgresGem

SYNOPSIS
       $(basename $0) [-h] 

DESCRIPTION

       (1) isProgramInstalled
           Checks if a program is installed on user OS

       (2) verifyPostgresRole
           Checks if a PostgreSQL role exits for the logged-in user.
           Essentially, the script checks if the following command
           returns '1':

           echo \$(psql postgres -tAc "SELECT 1 FROM pg_roles WHERE
           rolname='\$(whoami)'") 

       (3) verifyPostgresConnect
           Checks connectivity to PostgreSQL
           Essentially, the script checks the exit status of the 
           following command, where '0' is deemed  a successful 
           connection:

           echo \$(psql -d postgres -c "\\q" > /dev/null 2>&1; echo -n \$?)

       (4) verifyPostgresLogin 
           PostgreSQL uses md5-encryption and the password hash may
           be obtained as follows, where 'psql_password' is the user's
           PostgreSQL password:

           hashed_password=\$(echo -n \${psql_password}\$(whoami) | 
           md5sum); echo \$hashed_password
           
           Essentially, the program checks if this hashed_password 
           is present in the view 'pg_shadow' as follows:

           echo \$(psql  -d postgres -c 'select * from pg_shadow' |
           cut -d \| -f 7 | grep -c  \${hashed_password})
           
           The script takes a single optional argument, the name of
           the ENV variable holding the user's PostgreSQL password.
           If no argument is supplied, this is assumed to be 
           'POSTGRES_PASSWORD'

       (5) checkPostgresGem
           checks if the PostgreSQL gem is installed. 

OPTIONS 
       -h: get help

EXAMPLE USAGE
       (1) isProgramInstalled  "psql"
       (2) verifyPostgresRole 
       (3) verifyPostgresConnect 
       (4) verifyPostgresLogin
           verifyPostgresLogin "PGPASS" # 'PGPASS is ENV variable
       (5) checkPostgresGem 
END
}

## Set options
while getopts ":h" opt; do
	case $opt in
		h)
			usage | less
			exit 1
			;;
	esac
done

